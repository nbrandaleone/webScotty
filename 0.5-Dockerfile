# Minimal Haskell executable using multi-stage builds
#
# When using mult-build to Ubuntu I get a 113 MB image (tag 0.1)
# Approximately a 22 MB docker image when using alpine (tag 0.3)
# A statically built image is about 16 MB (tag 0.6)
# When using UPX and alpine, I get about a 7 MB docker image (tag 0.4)
# When using a statically built image and UPX, I get a 3.3 MB image. (tag 0.5)
#
# NOTE: for static, I had to alter the cabal file (executable section)
# and add "--ghc-options=-fPIC" to stack build
# executable webScotty-exe
#   main-is: Main.hs
#     ld-options: -static

FROM haskell:8.6.5 as build

# install UPX compression tool
ADD https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz /usr/local
RUN xz -d -c /usr/local/upx-3.95-amd64_linux.tar.xz | tar -xOf - upx-3.95-amd64_linux/upx > /bin/upx && chmod a+x /bin/upx

# Build Haskell dependencies
RUN mkdir -p /app/user
WORKDIR /app/user
COPY stack.yaml package.yaml stack.yaml.lock /app/user/
RUN stack build --system-ghc --dependencies-only --ghc-options=-fPIC

# Build project
COPY . .
RUN stack build --system-ghc --copy-bins --ghc-options=-fPIC
RUN strip /root/.local/bin/webScotty-exe \
&& upx /root/.local/bin/webScotty-exe

# ----------------------------------------

FROM scratch

# Copy executable over from build image, and run it
EXPOSE 3000
WORKDIR /app
COPY --from=build /root/.local/bin .
CMD ["/app/webScotty-exe"]
